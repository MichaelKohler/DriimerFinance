package driimerfinance.services;

import java.io.IOException;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.swing.JTable;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import driimerfinance.database.MandantDBHelper;
import driimerfinance.helpers.FinanceHelper;
import driimerfinance.models.Account;
import driimerfinance.models.Transaction;

/**
 * Special case of exports: Class to create a PDF from the exported data
 * 
 * (c) 2014 Driimer Finance
 */
public class PDFExporter {
	private String outputPaht = null;
	private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18,
			Font.BOLD);
	private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.NORMAL, BaseColor.RED);
	private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16,
			Font.BOLD);
	private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12,
			Font.BOLD);

	/**
	 * Constructor
	 */
	public PDFExporter() {
		// try {
		// createPdf(this.outputPaht);
		// } catch (DocumentException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// } catch (IOException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
	}
	
	
	public void createPdf(Object object) throws DocumentException, IOException {
		if (object instanceof JTable) {
			Document document = new Document(PageSize.A4.rotate());
			try {
				document.open();
				document.addTitle("Buchungsjournal");
				document.addSubject("Subject");
				document.addKeywords("keyword1, keyword2, keyword3");
				document.addAuthor(System.getProperty("user.name"));
				document.addCreator(System.getProperty("user.name"));
				
				//addTitlePage(document, "Buchungsjournal");
				addContent(document);
			} catch (Exception e) {
				System.err.println(e.getMessage());
			}
			document.close();
		}
	}


	private static void addContent(Document document) throws DocumentException {
	    Anchor anchor = new Anchor("Buchungsjournal", catFont);
	    anchor.setName("Buchungsjournal");
	    
	    // Second parameter is the number of the chapter
	    SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("dd-MM-yy:HH:mm:SS");
        Object date = DATE_FORMAT.format(new Date(System.currentTimeMillis()));
	    Chapter catPart = new Chapter(new Paragraph(anchor), 1);
	    catPart.add(new Paragraph(
				"Report erstellt von: " + System.getProperty("user.name") + ", " + date, //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
	    Paragraph para = new Paragraph();
	    addEmptyLine(para, 1);
	    
	    catPart.add(para);

	    // add a table
	    createJournalTable(catPart);

	    // now add all this to the document
	    document.add(catPart);
	  }


	public void setOutputPath(String outputPaht) {
		this.outputPaht = outputPaht;
	}

	private static void addTitlePage(Document document, String title) throws DocumentException {
		Paragraph preface = new Paragraph();
		// Lets write a big header
		preface.add(new Paragraph(title, catFont));
		// Will create: Report generated by: _name, _date
		preface.add(new Paragraph(
				"Report erstellt von: " + System.getProperty("user.name") + ", " + new Date(System.currentTimeMillis()), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
				smallBold));
		////addEmptyLine(preface, 3);
//		preface.add(new Paragraph(
//				"This document describes something which is very important ", smallBold));

//		addEmptyLine(preface, 8);

//		preface.add(new Paragraph(
//				"This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
//				redFont));

		document.add(preface);
		// Start a new page
		//document.newPage();
	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
		for (int i = 0; i < number; i++) {
			paragraph.add(new Paragraph(" "));
		}
	}
	
	private static void createJournalTable(Section subCatPart)
		      throws BadElementException {
		    PdfPTable table = new PdfPTable(7);
		    
		    PdfPCell c1 = new PdfPCell(new Phrase("ID"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);

		    c1 = new PdfPCell(new Phrase("Datum"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);

		    c1 = new PdfPCell(new Phrase("Soll-Konto"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		    
		    c1 = new PdfPCell(new Phrase("Haben-Konto"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		    
		    c1 = new PdfPCell(new Phrase("Buchungssatz"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		    
		    c1 = new PdfPCell(new Phrase("Betrag"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		    
		    c1 = new PdfPCell(new Phrase("Beleg-Nr"));
		    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
		    table.addCell(c1);
		    
		    table.setHeaderRows(1);
		    
		    MandantDBHelper helper = new MandantDBHelper();
			List<Transaction> transactions = helper.getAllTransactions();
			for (Transaction transaction : transactions) {
				
				
				Account sollAccount = helper.getAccountById(transaction.getFk_SollKonto());
				Account habenAccount = helper.getAccountById(transaction.getFk_HabenKonto());
				
				table.addCell(transaction.getId().toString());
			    table.addCell(transaction.getStringDate());
			    table.addCell(sollAccount.getName());
			    table.addCell(habenAccount.getName());
			    table.addCell(transaction.getBezeichnung());
			    table.addCell(FinanceHelper.formatAmount(transaction.getBetrag()));
			    table.addCell(transaction.getBelegNr().toString());
			}
		    subCatPart.add(table);

		  }
}